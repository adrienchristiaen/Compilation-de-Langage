Fichier -> with Ada'.'Text_I0';'use Ada'.'Text_I0';' procedure IDENT is DECLSTAR begin INSTRPLUS end IDENTINTERRO ';' EOF .DECLSTAR -> DECL DECLSTAR .DECLSTAR -> .DECL -> IDENTPLUSVIRGULE ':' TYPE DECLPRIM .DECL -> procedure IDENT PARAMSINTERRO is DECLPRIM begin INSTRPLUS end IDENTINTERRO ';' .DECL -> function IDENT PARAMSINTERRO return TYPE DECLPRIM begin INSTRPLUS end IDENTINTERRO ';' .DECL -> type IDENT DECLBIS .DECLPRIM -> '(' ':=' EXPRINTERRO ')' ';' .DECLPRIM -> DECLTER ';'.DECLBIS -> ';' .DECLBIS -> is DECLTER .DECLTER -> access IDENT ';' .DECLTER -> record CHAMPSPLUS end record ';' .CHAMPSPLUS -> CHAMPS CHAMPSPLUS2 .CHAMPSPLUS2 -> CHAMPS CHAMPSPLUS2 .CHAMPSPLUS2 -> .CHAMPS -> IDENTPLUSVIRGULE ':' TYPE ';' .TYPE -> IDENT .TYPE -> access IDENT .PARAMSINTERRO -> '(' PARAMSPLUSPOINTVIRGULE ')' .PARAMSINTERRO -> .PARAMSPLUSPOINTVIRGULE -> PARAMS PARAMSPLUSPOINTVIRGULE2 .PARAMSPLUSPOINTVIRGULE2 -> ';' PARAMS PARAMSPLUSPOINTVIRGULE2 .PARAMSPLUSPOINTVIRGULE2 -> .PARAMS -> PARAM PARAMSPLUSVIRGULE .PARAMSPLUSVIRGULE -> ',' PARAM PARAMSPLUSVIRGULE .PARAMSPLUSVIRGULE -> .PARAM -> IDENTPLUSVIRGULE ':' MODEINTERRO TYPE .MODEINTERRO -> MODE .MODEINTERRO -> .MODE -> IN MODEBIS .MODEBIS -> OUT .MODEBIS -> .EXPRINTERRO -> EXPR .EXPRINTERRO -> .EXPR -> TERM EXPRPRIM .EXPRPRIM -> OPERATEUR TERM EXPRPRIM .EXPRPRIM -> .TERM -> '(' EXPR ')' TERM2 .TERM -> ACCES TERM2 .TERM2 -> OPERATEUR TERM TERM2 .TERM2 -> .TERM -> ENTIER .TERM -> CARACTERE .TERM -> true .TERM -> false .TERM -> null .TERM -> not EXPR .TERM -> '-' EXPR .TERM -> new IDENT .TERM -> character 'Ô' val '(' EXPR ')' .ACCES -> IDENT ACCES2 .ACCES2 -> '.' IDENT ACCES2 .ACCES2 -> .INSTRPLUS -> INSTR INSTRPLUS2 .INSTRPLUS2 -> INSTR INSTRPLUS2 .INSTRPLUS2 -> .INSTR -> ACCES ':=' EXPR ';' .INSTR -> return EXPRINTERRO ';' .INSTR -> begin INSTRPLUS end ';' .INSTR -> if EXPR then INSTRPLUS ENDIF ';' .INSTR -> for IDENT in REVERSE EXPR '..' EXPR loop INSTRPLUS end loop ';' .INSTR -> while EXPR loop INSTRPLUS end loop ';' .INSTR -> IDENT INSTRBIS .ENDIF -> elsif EXPR then INSTRPLUS ENDIF .ENDIF -> .INSTRBIS -> '(' EXPRPLUSVIRGULE ')' ';' .INSTRBIS -> ';' .REVERSE -> REVERSE .REVERSE -> .