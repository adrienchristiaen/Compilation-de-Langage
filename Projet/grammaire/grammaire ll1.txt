Fichier -> with Ada'.'Text_I0';'use Ada'.' Text_I0 ';' 
procedure IDENT is DECLSTAR 
begin INSTRPLUS end IDENTINTERRO ';' EOF .

DECL -> IDENTPLUSVIRGULE ':' TYPE '(' ':=' EXPRINTERRO ')' ';' .
DECL -> procedure IDENT PARAMSINTERRO is DECLSTAR
begin INSTRPLUS end IDENTINTERRO ';' .
DECL -> function IDENT PARAMSINTERRO return TYPE is DECLSTAR
begin INSTRPLUS end IDENTINTERRO ';' .
DECL -> type IDENT DECLBIS .
DECLBIS -> ';' .
DECLBIS -> is DECLTER .
DECLTER-> access IDENT ';' .
DECLTER -> record CHAMPSPLUS end record ';' .

CHAMPS -> IDENTPLUSVIRGULE ':' TYPE ';' .

TYPE -> IDENT .
TYPE -> access IDENT .

PARAMS -> '(' PARAMSPLUSPOINTVIRGULE ')' .

PARAM -> IDENTPLUSVIRGULE ':' MODEINTERRO TYPE .

MODE -> IN MODEBIS .
MODEBIS -> OUT .
MODEBIS -> .

EXPR -> ENTIER .
EXPR -> CARACTERE .
EXPR -> true .
EXPR -> false .
EXPR -> null .
EXPR -> '(' EXPR ')' .
EXPR -> ACCES .
EXPR -> EXPR OPERATEUR EXPR .
EXPR -> not EXPR .
EXPR -> '-' EXPR .
EXPR -> new IDENT .
EXPR -> IDENT '(' EXPRPLUSVIRGULE ')' .
EXPR -> character 'â€˜' val '(' EXPR ')' .


INSTR -> ACCES ':=' EXPR ';' .
INSTR -> return EXPRINTERRO ';' .
INSTR -> begin INSTRPLUS end ';' .
INSTR -> if EXPR then INSTRPLUS '(' BOUCLE1 ')' '(' BOUCLE2 ')' end if ';' .
INSTR -> for IDENT in REVERSE EXPR '..' EXPR
loop INSTRPLUS end loop ';' .
INSTR -> while EXPR loop INSTRPLUS end loop ';' .
INSTR -> IDENT INSTRBIS .
INSTRBIS -> ';' .
INSTRBIS -> '(' EXPRPLUSVIRGULE ')' ';' .

OPERATEUR -> '=' .
OPERATEUR -> '/=' .
OPERATEUR -> '<' .
OPERATEUR -> '<=' .
OPERATEUR -> '>' .
OPERATEUR -> '>=' .
OPERATEUR -> '+' .
OPERATEUR -> '-' .
OPERATEUR -> '*' .
OPERATEUR -> '/' .
OPERATEUR -> rem .
OPERATEUR -> and OPERATEURBIS .
OPERATEURBIS -> then .
OPERATEURBIS -> .
OPERATEURBIS -> or OPERATEURTER .
OPERATEURTER -> else .
OPERATEURTER -> .

ACCES -> IDENT .
ACCES -> EXPR '.' IDENT .

DECLSTAR -> DECL DECLSTAR .
DECLSTAR -> . 

INSTRPLUS -> INSTR INSTRPLUS2 .  
INSTRPLUS2 -> INSTRPLUS .
INSTRPLUS2 -> .

IDENTINTERRO -> IDENT .
IDENTINTERRO -> .

CHAMPSPLUS -> CHAMPS CHAMPSPLUS2 .
CHAMPSPLUS2 -> CHAMPSPLUS .
CHAMPSPLUS2 -> .

IDENTPLUSVIRGULE -> IDENTPLUSVIRGULE2 .
IDENTPLUSVIRGULE2 -> ',' IDENTPLUSVIRGULE .
IDENTPLUSVIRGULE2 -> .

EXPRINTERRO -> EXPR .
EXPRINTERRO -> .

PARAMSINTERRO -> PARAMS .
PARAMSINTERRO -> .

PARAMSPLUSPOINTVIRGULE -> PARAMSPLUSPOINTVIRGULE2 .
PARAMSPLUSPOINTVIRGULE2 -> ';' PARAMSPLUSPOINTVIRGULE .
PARAMSPLUSPOINTVIRGULE2 -> .

MODEINTERRO -> MODE .
MODEINTERRO -> .

EXPRPLUSVIRGULE -> EXPRPLUSVIRGULE2 .
EXPRPLUSVIRGULE2 -> ',' EXPRPLUSVIRGULE .
EXPRPLUSVIRGULE2 -> .

BOUCLE1 -> '(' elsif EXPR then INSTRPLUS ')' BOUCLE1 .
BOUCLE1 -> .

BOUCLE2 -> else '(' INSTRPLUS ')' ';' .
BOUCLE2 -> .

REVERSE -> REVERSE .
REVERSE -> .